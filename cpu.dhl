* GraphicsRam: GraphicCard {
    @in(15) address @ (0, 0)
    @in(1) store @ (0, 20)
    @in(1) clock @ (0, 40)
    @in(1) load @ (0, 60)
    @in(1) buffer_select @ (0, 80)

    @in(8) data @ (60, 40)
    @out(8) data @ (60, 40)

    graphicHeight = 80
    graphicWidth = 120
    Bits = 8
}

* Driver8Bit: Driver {
    @in(8) data @ (-20, 0)
    @in(1) selector @ (0, -20)
    @out(8) out @ (20, 0)

    Bits = 8
}

Display {
    @in(1) rw, clock, buffer_select
    @in(16) address
    @in(8) data_in

    data_in_drived = Driver8Bit(data: data_in, selector: rw)
    data_out = GraphicsRam(address: address, store: rw, load: !rw, clock: clock, buffer_select: buffer_select, data: data_in_drived)

    @out out = data_out.data
}

* Add8Bit: Add { 
    @in(8) a @ (0, 0)
    @in(8) b @ (0, 20)
    @in(1) cin @ (0, 40)

    @out(8) out @ (60, 0)
    @out(1) cout @ (60, 20)

    Bits = 8
}

* Add16Bit: Add { 
    @in(16) a @ (0, 0)
    @in(16) b @ (0, 20)
    @in(1) cin @ (0, 40)

    @out(16) out @ (60, 0)
    @out(1) cout @ (60, 20)

    Bits = 16
}

* Sub8Bit: Sub { 
    @in(8) a @ (0, 0)
    @in(8) b @ (0, 20)
    @in(1) cin @ (0, 40)

    @out(8) out @ (60, 0)
    @out(1) cout @ (60, 20)

    Bits = 8
}

* Neg8Bit : Neg {
    @in(8) a @ (0, 0)

    @out(8) out @ (60, 0)

    Bits = 8
}

* RightShift8Bit: BarrelShifter{
    @in(8) in @ (0, 0)
    @in(4) shift @ (0, 40)

    @out(8) out @ (60, 20) 

    Bits = 8
    direction = right
}

* LeftShift8Bit: BarrelShifter{
    @in(8) in @ (0, 0)
    @in(4) shift @ (0, 40)

    @out(8) out @ (60, 20) 

    Bits = 8
    direction = left
}


Alu {
    @in(8) a, b

    // operations are:
    // 0: a + b (flag on carry)
    // 1: a - b (flag on carry)
    // 2: ~a   (b is ignored, flag on zero)
    // 3: a & b (flag on zero)
    // 4: a | b (flag on zero)
    // 5: a ^ b (flag on zero)
    // 6: a << b (flag on zero)
    // 7: a >> b (flag on zero)    
    @in(3) operation

    adder_result = Add8Bit(a: a, b: b, cin: 0)
    sub_result = Sub8Bit(a: a, b: b, cin: 0)
    not_result = !a
    and_result = a & b
    or_result = a | b
    xor_result = a ^ b
    left_shift_result = LeftShift8Bit(in: a, shift: b)
    right_shift_result = RightShift8Bit(in: a, shift: b)

    @out result = [
        0: adder_result.out,
        1: sub_result.out,
        2: not_result,
        3: and_result,
        4: or_result,
        5: xor_result,
        6: left_shift_result.out,
        7: right_shift_result.out
    ] % operation
}

* Register8Bit: Register {
    @in(8) data_in @ (0, 0)
    @in(1) clock @ (0, 20)
    @in(1) load @ (0, 40)

    @out(8) data_out @ (60, 20)

    Bits = 8
}

* Register16Bit: Register {
    @in(16) data_in @ (0, 0)
    @in(1) clock @ (0, 20)
    @in(1) load @ (0, 40)

    @out(16) data_out @ (60, 20)

    Bits = 16
    Label = "16_bit_register"
}

* Register1Bit: Register {
    @in(1) data_in @ (0, 0)
    @in(1) clock @ (0, 20)
    @in(1) load @ (0, 40)

    @out(1) data_out @ (60, 20)

    Bits = 1
}

* SignExtender8to16: BitExtender {
    @in(8) in @ (0, 0)

    @out(16) out @ (60, 0)

    inputBits = 8
    outputBits = 16
}

* Demux1Bit8Way: Demultiplexer {
    @in(3) selector @ (20, 160)
    @in(1) data_in @ (0, 80)

    @out(1) out_0 @ (40, 0)
    @out(1) out_1 @ (40, 20)
    @out(1) out_2 @ (40, 40)
    @out(1) out_3 @ (40, 60)
    @out(1) out_4 @ (40, 80)
    @out(1) out_5 @ (40, 100)
    @out(1) out_6 @ (40, 120)
    @out(1) out_7 @ (40, 140)

    Bits = 1
    Selector Bits = 3
}

* Counter3Bit: Counter {
    @in(1) en @ (0, 0)
    @in(1) clock @ (0, 20)
    @in(1) clr @ (0, 40)

    @out(3) out @ (60, 0)
    @out(1) overflow @ (60, 20)

    Bits = 3
}

* Delay1Bit2Time: Delay { 
    @in(1) in @ (0, 0)

    @out(1) out @ (40, 0)

    delayTime = 2
}

ClockDivider8Way {
    @in clock

    counter = Counter3Bit(en: 1, clock: clock, clr: 0)
    outputs = Demux1Bit8Way(selector: counter.out, data_in: Delay1Bit2Time(in: clock).out)

    @out out_0 = outputs.out_1
    @out out_1 = outputs.out_2
    @out out_2 = outputs.out_3
    @out out_3 = outputs.out_4
    @out out_4 = outputs.out_5
    @out out_5 = outputs.out_6
    @out out_6 = outputs.out_7
    @out out_7 = outputs.out_0
}

* Rom16Addr: ROM {
    @in(16) address @ (0, 0)
    @in(1) sel @ (0, 40)

    @out(8) data @ (60, 20)

    AddrBits = 16
    Bits = 8
    isProgramMemory = true
    Data = d""
}

* RS: RS_FF_AS {
    @in(1) s @ (0, 0)
    @in(1) r @ (0, 20)

    @out(1) q @ (60, 0)
    @out(1) not_q @ (60, 20)
}

IsZero {
    @in(8) in

    any_bit_on = in.0 | in.1 | in.2 | in.3 | in.4 | in.5 | in.6 | in.7

    @out out = !any_bit_on
}


// instruction format:
// an instruction is 16 bits long.

// if the lsb's are 0001, it's a load immediate
// xxxx xxxx xxxx 0001
// |||| |||| |||| ||||
// |||| ++++ ++++--------> Immediate
// |+++ -----------------> Register
// +---------------------> Reserved

// if the lsb's are 0011, it's a jump immediate (only jump when register is 0)
// xxxx xxxx xxxx 0011
// |||| |||| |||| ||||
// |||| ++++ ++++--------> Address (relative)
// |+++ -----------------> Register
// +---------------------> Reserved

// if the lsb's are 1001, it's a jump register (only jump when register is 0)
// xxxx xxxx xxxx 1001
// |||| |||| |||| ||||
// |||| |||| |+++--------> Address Register (absolute, lower bits)
// |||| ||++ +-----------> Address Register (absolute, upper bits)
// |+++ -----------------> Register
// +----++---------------> Reserved

// if the lsb's are 0101, it's a store
// xxxx xxxx xxxx 0101
// |||| |||| |||| ||||
// |||| |||| |+++--------> Register (lower bits of address)
// |||| ||++ +-----------> Register (upper bits of address)
// |+++ -----------------> Register (data)
// +----++---------------> Reserved

// if the lsb's are 0111, it's a load
// xxxx xxxx xxxx 0111
// |||| |||| |||| ||||
// |||| |||| |+++--------> Register (lower bits of address)
// |||| ||++ +-----------> Register (upper bits of address)
// |+++ -----------------> Register (destination)
// +----++---------------> Reserved


// if the lsb's are 1011, it's a load rom
// xxxx xxxx xxxx 1011
// |||| |||| |||| ||||
// |||| |||| |+++--------> Register (lower bits of address)
// |||| ||++ +-----------> Register (upper bits of address)
// |+++ -----------------> Register (destination)
// +----++---------------> Reserved

// if the lsb's are 1101, it's a read pc
// xxxx xxxx xxxx 1101
// |||| |||| |||| ||||
// |||| ++++ ++++--------> Reserved
// |+++ -----------------> Register (destination)
// +---------------------> 1 = Upper / 0 = Lower 

// if the lsb is 0, it's an operation (sets flag)
// xxxx xxxx xxxx xxx0
// |||| |||| |||| ||||
// |||| |||| |||| +++----> Operation
// |||| |||| |+++--------> Register LHS
// |||| ||++ +-----------> Register RHS
// |+++ -----------------> Register Result
// +----++---------------> Reserved

@clock(200000) clock

divided_clock = ClockDivider8Way(clock: clock)

fetch_clock_first = divided_clock.out_0
fetch_clock_increment = divided_clock.out_1
fetch_clock_second = divided_clock.out_2
fetch_clock_decrement = divided_clock.out_3
set_ram_mode_clock = divided_clock.out_4
ram_clock = divided_clock.out_5
register_clock = divided_clock.out_6
pc_clock = divided_clock.out_7

@wire(8) rom_output

@out rom_output_0 = Register8Bit(data_in: rom_output, clock: fetch_clock_first, load: 1).data_out
@out rom_output_1 = Register8Bit(data_in: rom_output, clock: fetch_clock_second, load: 1).data_out
@out(16) current_instruction = [
    0..7: rom_output_0,
    8..15: rom_output_1
]


// instruction decoder
@out is_jump_immediate = current_instruction.0 & current_instruction.1 & !current_instruction.2 & !current_instruction.3
@out is_jump_reg = current_instruction.0 & !current_instruction.1 & !current_instruction.2 & current_instruction.3
@out is_load = current_instruction.0 & current_instruction.1 & current_instruction.2 & !current_instruction.3
@out is_load_rom = current_instruction.0 & current_instruction.1 & !current_instruction.2 & current_instruction.3
@out is_li = current_instruction.0 & !current_instruction.1 & !current_instruction.2 & !current_instruction.3
@out is_store = current_instruction.0 & !current_instruction.1 & current_instruction.2 & !current_instruction.3
@out is_read_pc = current_instruction.0 & current_instruction.1 & !current_instruction.2 & current_instruction.3
@out is_operation = !current_instruction.0

read_pc_upper = current_instruction.15

immediate = current_instruction.4..11
output_register = current_instruction.12..14

operation_type = current_instruction.1..3
operation_lhs = current_instruction.4..6
operation_rhs = current_instruction.7..9

@wire(8) registers_in

register_en = Demux1Bit8Way(selector: output_register, data_in: 1) // this is basically a poor man's decoder

@out(8) reg_0 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_0)
@out(8) reg_1 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_1)
@out(8) reg_2 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_2)
@out(8) reg_3 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_3)
@out(8) reg_4 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_4)
@out(8) reg_5 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_5)
@out(8) reg_6 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_6)
@out(8) reg_7 = Register8Bit(data_in: registers_in, clock: register_clock, load: register_en.out_7)

RegisterOutPicker {
    @in(3) register

    @out out = [
        0: reg_0,
        1: reg_1,
        2: reg_2,
        3: reg_3,
        4: reg_4,
        5: reg_5,
        6: reg_6,
        7: reg_7
    ] % register
}

operation_lhs_data = RegisterOutPicker(register: operation_lhs)
operation_rhs_data = RegisterOutPicker(register: operation_rhs)
operation_output_register_data = RegisterOutPicker(register: output_register) // this is for operations where the output register is actually the data

alu = Alu(a: operation_lhs_data.out, b: operation_rhs_data.out, operation: operation_type)

ram_address = [
    0..7: operation_lhs_data.out,
    8..15: operation_rhs_data.out
]


@wire(16) pc_out
@out(16) reg_pc = Register16Bit(data_in: pc_out, clock: pc_clock, load: 1)

rom_read_rs = RS(s: fetch_clock_increment, r: fetch_clock_decrement)
rom_load_rs = RS(s: ram_clock, r: pc_clock)

@out(16) rom_read_addr = [
    0b01: ram_address,
    0b10: Add16Bit(a: reg_pc, b: rom_read_rs.q, cin: 0).out,
] % [
    0: rom_load_rs.q,
    1: rom_load_rs.not_q
]

rom_output = Rom16Addr(address: rom_read_addr, sel: 1).data

ram_rw_flag = Register1Bit(data_in: is_store, clock: set_ram_mode_clock, load: 1)

@out ram_out = Display(address: ram_address, rw: ram_rw_flag.data_out, clock: ram_clock, data_in: operation_output_register_data.out, buffer_select: 0).out

@out ram_out_reg = Register8Bit(data_in: ram_out, clock: ram_clock, load: 1).data_out

@out rom_o = rom_output

read_pc = [
    0: reg_pc.data_out.0..7,
    1: reg_pc.data_out.8..15
] % read_pc_upper

@out reg_in = [
    0b000001: alu.result,
    0b000010: immediate,
    0b000100: ram_out_reg,
    0b001000: rom_output,
    0b010000: read_pc,
    0b100000: operation_output_register_data.out,
] % [
    0: is_operation,
    1: is_li,
    2: is_load,
    3: is_load_rom,
    4: is_read_pc,
    5: is_jump_immediate | is_jump_reg | is_store,
]

registers_in = reg_in


@out is_out_zero = IsZero(in: operation_output_register_data.out).out

should_jump_imm = (is_jump_immediate | is_jump_reg) & is_out_zero
should_jump_reg = is_jump_reg & is_out_zero

pc_relative = Add16Bit(a: reg_pc, b: [
    0b01: 2,
    0b10: SignExtender8to16(in: immediate).out,
] % [
    0: !should_jump_imm,
    1: should_jump_imm
], cin: 0).out

pc_out = [
    0b01: pc_relative,
    0b10: ram_address
] % [
    0: !should_jump_reg,
    1: should_jump_reg
]


@out output = registers_in
@out alu_result = alu.result